package com.norelax.www;import com.fasterxml.jackson.core.JsonProcessingException;import org.junit.Before;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.SpringApplicationConfiguration;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpServletResponse;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.web.context.WebApplicationContext;/** * @author wusong * @create 2017-06-16 上午9:51 **/@RunWith(SpringJUnit4ClassRunner.class) // SpringJUnit支持，由此引入Spring-Test框架支持！@SpringApplicationConfiguration(classes = Application.class) // 指定我们SpringBoot工程的Application启动类@WebAppConfiguration // 由于是Web项目，Junit需要模拟ServletContext，因此我们需要给我们的测试类加上@WebAppConfiguration。public abstract class AbstractBaseTest {    @Autowired    WebApplicationContext webApplicationContext;    MockMvc mvc;    protected String requestUrl;    public void setRequestUrl(String requestUrl) {        this.requestUrl = requestUrl;    }    @Before    public void setUp() throws JsonProcessingException {        mvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();    }    public String requestUrlAndReturn() {        String contentAsString = "";        try {        MvcResult result = mvc.perform(MockMvcRequestBuilders.get(requestUrl).accept(MediaType.APPLICATION_JSON_UTF8)).andReturn();        MockHttpServletResponse response = result.getResponse();            contentAsString = response.getContentAsString();        } catch (Exception e) {            e.printStackTrace();        }            return contentAsString;    }}